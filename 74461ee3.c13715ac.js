(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{74:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return s})),n.d(e,"metadata",(function(){return i})),n.d(e,"toc",(function(){return r})),n.d(e,"default",(function(){return l}));var o=n(3),a=(n(0),n(88));const s={id:"quick-store",title:"Creating a Store"},i={unversionedId:"quick-store",id:"quick-store",isDocsHomePage:!1,title:"Creating a Store",description:"Here we will create a store for a hypothetical todo-list application.",source:"@site/docs/quick-store.md",slug:"/quick-store",permalink:"/docs/quick-store",editUrl:"https://github.com/wire-ts/website/edit/master/docs/quick-store.md",version:"current",sidebar:"someSidebar",previous:{title:"Structuring your App",permalink:"/docs/structure"},next:{title:"Creating a Root Store",permalink:"/docs/root-store"}},r=[{value:"Initial State",id:"initial-state",children:[]},{value:"Actions",id:"actions",children:[]},{value:"Thunks",id:"thunks",children:[]}],c={toc:r};function l({components:t,...e}){return Object(a.b)("wrapper",Object(o.a)({},c,e,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Here we will create a store for a hypothetical todo-list application."),Object(a.b)("h3",{id:"initial-state"},"Initial State"),Object(a.b)("p",null,"Let's start by defining our types. To get started with Wire, we will need to pass an initial state."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},'import { store } from "@wire-ts/wire";\n\ninterface Todo {\n  id: number;\n  task: string;\n  done: boolean;\n}\n\nconst initialState: { list: Todo[] }= { list: [] }\n\nexport default store(initialState)\n')),Object(a.b)("h3",{id:"actions"},"Actions"),Object(a.b)("p",null,"Now that we have our state type, we can start defining some actions. Actions are functions that take in the ",Object(a.b)("strong",{parentName:"p"},"current")," state, some arguments (optional), and output a ",Object(a.b)("strong",{parentName:"p"},"new")," state."),Object(a.b)("p",null,"To enforce good habits, Wire passes in the current state as an ",Object(a.b)("strong",{parentName:"p"},"immutable")," object. If you try to mutate the state, you will get a type error."),Object(a.b)("p",null,"Actions can be asynchronous as well for the common cases of getting and posting data using an API."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},'import { store } from "@wire-ts/wire";\n\ninterface Todo {\n  id: number;\n  task: string;\n  done: boolean;\n}\n\nexport default store({ list: [] as Todo[] }).actions({\n  add: (state, todo: Todo) => ({\n    ...state,\n    list: [...state.list, todo],\n  }),\n  remove: async (state, id: number) => {\n    await someApiCall();\n\n    return {\n      ...state,\n      list: state.list.filter((todo) => todo.id !== id),\n    }\n  },\n});\n')),Object(a.b)("p",null,"And that's it. The data store is now ready to be included in a Root Store. Optionally, you may define thunks (see below)."),Object(a.b)("h3",{id:"thunks"},"Thunks"),Object(a.b)("p",null,"Thunks are higher-level functions that can call other actions. Thunks do not return a new state and can only change the state via actions."),Object(a.b)("p",null,"Example:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},'import { store } from "@wire-ts/wire";\n\ninterface Todo {\n  id: number;\n  task: string;\n  done: boolean;\n}\n\nconst todos = store({ list: [] as Todo[] }).actions({\n  add: (state, todo: Todo) => ({\n    ...state,\n    list: [...state.list, todo],\n  }),\n  remove: async (state, id: number) => {\n    await someApiCall();\n\n    return {\n      ...state,\n      list: state.list.filter((todo) => todo.id !== id),\n    }\n  },\n}).thunks({\n  sampleTodos: async (someArg: boolean) => {\n    console.log(store.state);\n    todos.actions.add({ ... });\n    await store.actions.remove(123);\n  }\n});\n\nexport default todos;\n')))}l.isMDXComponent=!0}}]);