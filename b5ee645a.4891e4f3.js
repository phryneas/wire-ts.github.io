(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return d}));var o=t(3),s=(t(0),t(88));const a={id:"in-components",title:"Using in Components"},c={unversionedId:"in-components",id:"in-components",isDocsHomePage:!1,title:"Using in Components",description:"Here we use the Wire Root Store to connect functional and class components.",source:"@site/docs/using-in-components.md",slug:"/in-components",permalink:"/docs/in-components",editUrl:"https://github.com/wire-ts/website/edit/master/docs/using-in-components.md",version:"current",sidebar:"someSidebar",previous:{title:"Creating a Root Store",permalink:"/docs/root-store"}},i=[{value:"React Hook",id:"react-hook",children:[]},{value:"Class Components",id:"class-components",children:[]}],r={toc:i};function d({components:e,...n}){return Object(s.b)("wrapper",Object(o.a)({},r,n,{components:e,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Here we use the Wire Root Store to connect functional and class components."),Object(s.b)("h3",{id:"react-hook"},"React Hook"),Object(s.b)("p",null,"The root store has a ",Object(s.b)("inlineCode",{parentName:"p"},"useStore()")," hook for retrieving state, actions, and thunks."),Object(s.b)("p",null,"In this example, we take the entire ",Object(s.b)("inlineCode",{parentName:"p"},"todos")," store and use destructuring to extract the state and actions. You could of course pull in state and actions from other stores as well."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import React from "react";\nimport store from "state";\n\nconst App = () => {\n  const {\n    state: { list: todos },\n    actions: { add, load, remove, modify },\n  } = store.useStore((root) => ({ ...root.todos }));\n\n  React.useEffect(() => {\n    load();\n  }, []);\n\n  return (\n    <div className="App">\n      {todos.map((todo, i) => (\n        <div key={i} className="item">\n          <input\n            type="checkbox"\n            checked={todo.done}\n            onChange={(e) => modify(i, { done: e.target.checked })}\n          />\n          <input\n            defaultValue={todo.task}\n            onChange={(e) => modify(i, { task: e.target.value })}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n')),Object(s.b)("h3",{id:"class-components"},"Class Components"),Object(s.b)("p",null,"Class components are connected similarly, but using a different function."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-ts"},'import React from "react";\nimport store from "state";\nimport { Props } from "wire"\n\nconst connect = store.connect(root => ({ ...root.todos }));\n\nclass App extends React.Component<Props<typeof connect>> {\n  render() {\n    const {\n      state: { list: todos },\n      actions: { add, load, remove, modify },\n    } = this.props;\n\n    return (\n      <div className="App">\n        {todos.map((todo, i) => (\n          <div key={i} className="item">\n            <input\n              type="checkbox"\n              checked={todo.done}\n              onChange={(e) => modify(i, { done: e.target.checked })}\n            />\n            <input\n              defaultValue={todo.task}\n              onChange={(e) => modify(i, { task: e.target.value })}\n            />\n          </div>\n        ))}\n      </div>\n    );\n\n  }\n}\n\nexport default connect(App);\n')))}d.isMDXComponent=!0}}]);